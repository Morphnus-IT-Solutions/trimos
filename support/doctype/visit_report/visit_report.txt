# DocType, Visit Report
[

	# These values are common in all dictionaries
	{
		'creation': '2009-05-15 14:07:47',
		'docstatus': 0,
		'modified': '2012-06-05 17:38:07',
		'modified_by': 'sangeeta_a@trimosmetrology.net',
		'owner': 'Administrator'
	},

	# These values are common for all DocType
	{
		'_last_update': '1338878154',
		'client_script': 'cur_frm.cscript.onload = function(doc, cdt, cdn) {\n  if(!doc.status) doc.status = \'Open\';\n}\n\ncur_frm.cscript.item_code = function(doc, cdt, cdn) {\n  var d = locals[cdt][cdn];\n  get_server_fields(\'get_item_details\',d.item_code,\'visit_report_details\',doc, cdt, cdn, 1);\n}\n\ncur_frm.cscript.prepared_by = function(doc, cdt, cdn){\n  if(doc.prepared_by)\n    get_server_fields(\'get_owner_details\',\'\',\'\',doc, cdt, cdn, 1);\n}\n\ncur_frm.cscript.service_person_name = function(doc, cdt, cdn) {\n  var d = locals[cdt][cdn];\n  get_server_fields(\'get_service_person_details\',d.service_person_name,\'service_team\',doc, cdt, cdn, 1);\n}\n\ncur_frm.fields_dict[\'visit_report_details\'].grid.get_field("customer_name").get_query = function(doc, cdt, cdn){\n return \'SELECT `tabCustomer`.name,`tabCustomer`.territory FROM `tabCustomer` WHERE `tabCustomer`.is_active = "Yes" AND `tabCustomer`.name LIKE "%s" ORDER BY `tabCustomer`.name ASC LIMIT 50\';\n}\n\ncur_frm.cscript.customer_name = function(doc, cdt, cdn) {\n  var d = locals[cdt][cdn];\n  get_server_fields(\'get_customer_details\',d.customer_name,\'visit_report_details\', doc, cdt, cdn, 1);\n}\n\ncur_frm.fields_dict[\'visit_report_details\'].grid.get_field("contact_person").get_query = function(doc, cdt, cdn) {\n  var d = locals[this.doctype][this.docname];\n  return \'SELECT `tabContact`.contact_name FROM `tabContact` WHERE `tabContact`.is_customer = 1 AND `tabContact`.customer_name = "\'+ d.customer_name+\'" AND `tabContact`.contact_name LIKE "%s" ORDER BY `tabContact`.contact_name ASC LIMIT 50\';\n}\n\ncur_frm.cscript.contact_person = function(doc, cdt, cdn) {\n  var d = locals[cdt][cdn];\n  get_server_fields(\'get_contact_person_details\',d.contact_person,\'visit_report_details\',doc, cdt, cdn, 1);\n}\n\n\ncur_frm.fields_dict[\'visit_report_details\'].grid.get_field("against_document_no").get_query = function(doc, cdt, cdn){\n  var d = locals[this.doctype][this.docname];\n  if(d.against_document == \'Lead\'){\n    return \'SELECT `tab\'+d.against_document+\'`.`name` FROM `tab\'+d.against_document+\'` WHERE `tab\'+d.against_document+\'`.`name` LIKE "%s" ORDER BY `tab\'+d.against_document+\'`.`name` DESC LIMIT 50\'\n  }\n\n  else if(d.against_document != \'Others\'){\n    return \'SELECT `tab\'+d.against_document+\' Report`.`name` FROM `tab\'+d.against_document+\' Report` WHERE `tab\'+d.against_document+\' Report`.`name` LIKE "%s" ORDER BY `tab\'+d.against_document+\' Report`.`name` DESC LIMIT 50\'\n  }\n\n}',
		'colour': 'White:FFF',
		'doctype': 'DocType',
		'in_create': 0,
		'module': 'Support',
		'name': '__common__',
		'print_outline': 'No',
		'search_fields': 'status,prepared_by,date,visit_type,fiscal_year,territory',
		'section_style': 'Simple',
		'server_code': 'class DocType:\n  def __init__(self, doc, doclist=[]):\n    self.doc = doc\n    self.doclist = doclist\n\n  def autoname(self):\n    self.doc.name = make_autoname(self.doc.naming_series+\'/.####\')\n\n  def get_item_details(self,name):\n    det = sql("select brand,product_code from tabItem where name = %s",name,as_dict=1)\n    ret = {\n      \'brand\'        :    det and det[0][\'brand\'] or \'\',\n      \'product_code\' :    det and det[0][\'product_code\'] or \'\'\n    }\n    return str(ret)\n\n  def get_owner_details(self):\n    det = sql("select territory, department, designation from `tabSales Person` where name = %s",self.doc.prepared_by,as_dict = 1)\n    ret = {\n      \'territory\'    :    det and det[0][\'territory\'] or \'\',\n      \'department\'   :    det and det[0][\'department\'] or \'\',\n      \'designation\'  :    det and det[0][\'designation\'] or \'\'\n    }\n    return str(ret)\n\n  def update_monthly_visit_schedule(self,visit_id,actual_date,remarks,purpose,against_document_no,date):\n    sql("update `tabScheduled Visit Details` set visit_report_id = %s, actual_date = %s, visit_report_remarks = %s where purpose = %s and against_document_no = %s and scheduled_date = %s",(visit_id,actual_date,remarks,purpose,against_document_no,date))\n    sql("update `tabUnscheduled Visit Details` set visit_report_id = %s, actual_date = %s, visit_report_remarks = %s where purpose = %s and against_document_no = %s and scheduled_date = %s",(visit_id,actual_date,remarks,purpose,against_document_no,date))  \n    \n  def update_against_document_details(self,against_document,visit_id,actual_date,remarks,purpose,against_document_no,date):\n    if against_document == \'Lead\':\n      sql("update `tabFollow up` set visit_report_id = %s, follow_up_actual_date = %s, remarks = %s where follow_up_status = %s and follow_up_schedule_date = %s and parent = %s",(visit_id,actual_date,remarks,purpose,date,against_document_no))\n    elif against_document == \'Serial No\':\n      sql("update `tabService Schedule` set visit_report_id = %s, actual_date = %s, remarks = %s where service_type = %s and schedule_date = %s and parent = %s",(visit_id,actual_date,remarks,purpose,date,against_document_no))\n  \n  def get_service_person_details(self,name):\n    det = sql("select mobile_no, designation from `tabSales Person` where name = %s",name,as_dict = 1)\n    ret = {\n      \'contact_no\'       :    det and det[0][\'mobile_no\'] or \'\',\n      \'designation\'      :    det and det[0][\'designation\']\n    }\n    return str(ret)\n    \n  def get_customer_details(self, name):\n    det = sql("select territory from tabCustomer where name = %s",name)\n    ret = {\n      \'territory\'  :  det and det[0][0] or \'\'\n    }\n    return str(ret)\n    \n  def get_contact_person_details(self, name):\n    det = sql("select department,designation from tabContact where contact_name = %s",name,as_dict = 1)\n    ret = {\n      \'department\'  :  det and det[0][\'department\'] or \'\',\n      \'designation\' :  det and det[0][\'designation\'] or \'\'\n    }\n    return str(ret)\n\n  def check_active_items(self):\n    for d in getlist(self.doclist, \'visit_report_details\'):\n      if d.item_code:\n        active_items = sql("select is_active from tabItem where name = %s" , d.item_code)\n        active_items = active_items and active_items[0][0] or \'\'\n        if not active_items == \'Yes\':\n          msgprint("Item : \'%s\' is Inactive" %(d.item_code))\n          raise Exception\n\n  def check_active_contact(self):\n    for d in getlist(self.doclist, \'visit_report_details\'):\n      if d.customer_name and d.contact_person:\n        active = sql("select is_active from `tabContact` where contact_name = \'%s\' and customer_name = \'%s\' " %(d.contact_person, d.customer_name))\n        active = active and active[0][0] or \'\'\n        if not active == \'Yes\':\n          msgprint("Contact : \'%s\' is inactive for customer \'%s\'." %(d.contact_person, d.customer_name))\n          raise Exception\n\n  def check_active_customer(self):\n    for d in getlist(self.doclist, \'visit_report_details\'):\n      if d.customer_name:\n        active = sql("select is_active from `tabCustomer` where name = \'%s\' " %(d.customer_name))\n        active = active and active[0][0] or \'\'\n        if not active == \'Yes\':\n          msgprint("Customer : \'%s\' is inactive." %(d.customer_name))\n          raise Exception\n\n  \n  def validate(self):\n    self.check_active_items()\n    self.check_active_customer()\n    self.check_active_contact()\n    self.doc.status = get_obj(\'Sales Common\').set_status(\'Open\',self.doc.doctype,self.doc.name)\n  \n  def on_submit(self):\n    for d in getlist(self.doclist,\'visit_report_details\'):\n      self.update_monthly_visit_schedule(self.doc.name,d.actual_visit_start_date,self.doc.remarks_by_service_person,d.purpose,d.against_document_no,(d.scheduled_date))\n      self.update_against_document_details(d.against_document,self.doc.name,d.actual_visit_start_date,self.doc.remarks_by_service_person,d.purpose,d.against_document_no,(d.scheduled_date))\n    self.add_to_calendar()\n    self.doc.status = get_obj(\'Sales Common\').set_status(\'Submitted\',self.doc.doctype,self.doc.name)\n    \n  def on_cancel(self):\n    for d in getlist(self.doclist,\'visit_report_details\'):\n      self.update_monthly_visit_schedule(\'\',\'\',\'\',d.purpose,d.against_document_no,(d.scheduled_date))\n      self.update_against_document_details(d.against_document,\'\',\'\',\'\',d.purpose,d.against_document_no,(d.scheduled_date))\n    \n    # Remove Events from Calendar\n    sql("update tabEvent set event_type = \'Cancel\' where ref_type = \'Visit Report\' and ref_name = %s",self.doc.name)\n    \n    self.doc.status = get_obj(\'Sales Common\').set_status(\'Cancelled\',self.doc.doctype,self.doc.name)\n\n  # Add Follow Up and Date to Calendar\n  # ----------------------------------------\n  def add_to_calendar(self):\n    sales_com_obj = get_obj(\'Sales Common\')\n    for d in getlist(self.doclist,\'visit_report_details\'):\n      if d.follow_up and d.follow_up_date:\n        sales_com_obj.add_to_calendar(self.doc.prepared_by,d.follow_up,d.follow_up_date,self.doc.doctype,self.doc.name)',
		'server_code_error': '<pre style="text-align: left;"></pre>',
		'show_in_menu': 0,
		'version': 72
	},

	# These values are common for all DocField
	{
		'doctype': 'DocField',
		'name': '__common__',
		'parent': 'Visit Report',
		'parentfield': 'fields',
		'parenttype': 'DocType'
	},

	# These values are common for all DocPerm
	{
		'doctype': 'DocPerm',
		'name': '__common__',
		'parent': 'Visit Report',
		'parentfield': 'permissions',
		'parenttype': 'DocType',
		'read': 1
	},

	# DocType, Visit Report
	{
		'doctype': 'DocType',
		'name': 'Visit Report'
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldtype': 'Section Break',
		'label': 'Visit Report',
		'oldfieldtype': 'Section Break',
		'permlevel': 0,
		'print_hide': 1
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldtype': 'Column Break',
		'oldfieldtype': 'Column Break',
		'permlevel': 0,
		'width': '50%'
	},

	# DocField
	{
		'default': 'VRT/12/MAY/LOCAL',
		'doctype': 'DocField',
		'fieldname': 'naming_series',
		'fieldtype': 'Select',
		'label': 'Naming Series',
		'oldfieldname': 'naming_series',
		'oldfieldtype': 'Select',
		'options': '\nVRT/12/MAY/LOCAL\nVRT/12/MAY/OUTSTATION\nVRT/12/JUN/LOCAL\nVRT/12/JUN/OUTSTATION\nVRT/12/JUL/LOCAL\nVRT/12/JUL/OUTSTATION\nVRT/12/AUG/LOCAL\nVRT/12/AUG/OUTSTATION\nVRT/12/APR/LOCAL\nVRT/12/APR/OUTSTATION',
		'permlevel': 0,
		'reqd': 1
	},

	# DocField
	{
		'default': 'Open',
		'doctype': 'DocField',
		'fieldname': 'status',
		'fieldtype': 'Select',
		'label': 'Status',
		'oldfieldname': 'status',
		'oldfieldtype': 'Select',
		'options': '\nOpen\nClosed\nSubmitted\nCancelled\nAmended',
		'permlevel': 1,
		'print_hide': 1
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldname': 'date',
		'fieldtype': 'Date',
		'label': 'Date',
		'oldfieldname': 'date',
		'oldfieldtype': 'Date',
		'permlevel': 0,
		'reqd': 1
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldname': 'fiscal_year',
		'fieldtype': 'Select',
		'in_filter': 1,
		'label': 'Fiscal Year',
		'oldfieldname': 'fiscal_year',
		'oldfieldtype': 'Select',
		'options': 'link:Fiscal Year',
		'permlevel': 0
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldname': 'month',
		'fieldtype': 'Select',
		'label': 'Month',
		'oldfieldname': 'month',
		'oldfieldtype': 'Select',
		'options': '\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug\nSep\nOct\nNov\nDec',
		'permlevel': 0,
		'reqd': 1
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldname': 'amended_from',
		'fieldtype': 'Data',
		'hidden': 1,
		'label': 'Amended From',
		'oldfieldname': 'amended_from',
		'oldfieldtype': 'Data',
		'permlevel': 1,
		'print_hide': 1
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldname': 'amendment_date',
		'fieldtype': 'Date',
		'hidden': 1,
		'label': 'Amendment Date',
		'oldfieldname': 'amendment_date',
		'oldfieldtype': 'Date',
		'permlevel': 0,
		'print_hide': 1
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldtype': 'Column Break',
		'oldfieldtype': 'Column Break',
		'permlevel': 0,
		'width': '50%'
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldname': 'prepared_by',
		'fieldtype': 'Link',
		'label': 'Prepared By',
		'oldfieldname': 'prepared_by',
		'oldfieldtype': 'Link',
		'options': 'Sales Person',
		'permlevel': 0,
		'reqd': 1,
		'trigger': 'Client'
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldname': 'territory',
		'fieldtype': 'Link',
		'label': 'Territory',
		'oldfieldname': 'territory',
		'oldfieldtype': 'Link',
		'options': 'Territory',
		'permlevel': 1,
		'reqd': 0
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldname': 'department',
		'fieldtype': 'Data',
		'label': 'Department',
		'oldfieldname': 'department',
		'oldfieldtype': 'Data',
		'permlevel': 1
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldname': 'designation',
		'fieldtype': 'Data',
		'label': 'Designation',
		'oldfieldname': 'designation',
		'oldfieldtype': 'Data',
		'permlevel': 1
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldname': 'cancel_reason',
		'fieldtype': 'Data',
		'label': 'Cancel Reason',
		'no_copy': 1,
		'oldfieldname': 'cancel_reason',
		'oldfieldtype': 'Data',
		'permlevel': 1,
		'print_hide': 1
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldtype': 'Section Break',
		'label': 'Details',
		'oldfieldtype': 'Section Break',
		'options': 'Simple',
		'permlevel': 0
	},

	# DocField
	{
		'doctype': 'DocField',
		'fieldname': 'visit_report_details',
		'fieldtype': 'Table',
		'label': 'Visit Report Details',
		'oldfieldname': 'visit_report_details',
		'oldfieldtype': 'Table',
		'options': 'Visit Report Detail',
		'permlevel': 0
	},

	# DocPerm
	{
		'amend': 0,
		'cancel': 0,
		'create': 0,
		'doctype': 'DocPerm',
		'match': 'territory',
		'permlevel': 1,
		'role': 'Schedule Approver',
		'submit': 0,
		'write': 0
	},

	# DocPerm
	{
		'amend': 0,
		'cancel': 0,
		'create': 0,
		'doctype': 'DocPerm',
		'match': 'territory',
		'permlevel': 0,
		'role': 'Schedule Approver',
		'submit': 0,
		'write': 1
	},

	# DocPerm
	{
		'amend': 0,
		'cancel': 0,
		'create': 0,
		'doctype': 'DocPerm',
		'permlevel': 1,
		'role': 'CRM User',
		'submit': 0,
		'write': 0
	},

	# DocPerm
	{
		'amend': 0,
		'cancel': 0,
		'create': 0,
		'doctype': 'DocPerm',
		'permlevel': 0,
		'role': 'CRM User',
		'submit': 0,
		'write': 0
	},

	# DocPerm
	{
		'amend': 0,
		'cancel': 0,
		'create': 0,
		'doctype': 'DocPerm',
		'match': 'territory',
		'permlevel': 0,
		'role': 'Accounts Team',
		'submit': 0,
		'write': 0
	},

	# DocPerm
	{
		'amend': 0,
		'cancel': 0,
		'create': 0,
		'doctype': 'DocPerm',
		'permlevel': 1,
		'role': 'Accounts Team',
		'submit': 0,
		'write': 0
	},

	# DocPerm
	{
		'amend': 1,
		'cancel': 1,
		'create': 1,
		'doctype': 'DocPerm',
		'match': 'owner',
		'permlevel': 0,
		'role': 'Service Team',
		'submit': 1,
		'write': 1
	},

	# DocPerm
	{
		'amend': 1,
		'cancel': 1,
		'create': 1,
		'doctype': 'DocPerm',
		'permlevel': 1,
		'role': 'Sales Team',
		'submit': 1,
		'write': 1
	},

	# DocPerm
	{
		'doctype': 'DocPerm',
		'permlevel': 1,
		'role': 'Service Team'
	},

	# DocPerm
	{
		'doctype': 'DocPerm',
		'permlevel': 1,
		'role': 'CRM Manager'
	},

	# DocPerm
	{
		'amend': 1,
		'cancel': 1,
		'create': 1,
		'doctype': 'DocPerm',
		'match': 'owner',
		'permlevel': 0,
		'role': 'Sales Team',
		'submit': 1,
		'write': 1
	},

	# DocPerm
	{
		'amend': 1,
		'cancel': 1,
		'create': 1,
		'doctype': 'DocPerm',
		'execute': 0,
		'permlevel': 0,
		'role': 'CRM Manager',
		'submit': 1,
		'write': 1
	},

	# DocPerm
	{
		'cancel': 1,
		'create': 1,
		'doctype': 'DocPerm',
		'permlevel': 0,
		'role': 'Administrator',
		'submit': 1,
		'write': 1
	},

	# DocPerm
	{
		'doctype': 'DocPerm',
		'permlevel': 1,
		'role': 'Administrator'
	},

	# DocPerm
	{
		'amend': 0,
		'cancel': 0,
		'create': 0,
		'doctype': 'DocPerm',
		'execute': 0,
		'match': 'territory',
		'permlevel': 0,
		'role': 'CRM User - Regional',
		'submit': 0,
		'write': 0
	},

	# DocPerm
	{
		'amend': 0,
		'cancel': 0,
		'create': 0,
		'doctype': 'DocPerm',
		'execute': 0,
		'permlevel': 1,
		'role': 'CRM User - Regional',
		'submit': 0,
		'write': 0
	},

	# DocPerm
	{
		'doctype': 'DocPerm',
		'permlevel': 0,
		'role': 'CRM User - HO'
	},

	# DocPerm
	{
		'doctype': 'DocPerm',
		'permlevel': 1,
		'role': 'CRM User - HO'
	},

	# DocPerm
	{
		'doctype': 'DocPerm',
		'permlevel': 0,
		'role': 'CRM Viewer'
	},

	# DocPerm
	{
		'doctype': 'DocPerm',
		'permlevel': 1,
		'role': 'CRM Viewer'
	}
]